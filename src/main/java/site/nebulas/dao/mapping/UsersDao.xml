<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.nebulas.dao.UsersDao">

	<select id="queryByParam" resultType="Users">
		select
			id id,
			account account,
			mailbox mailbox,
			password password,
			salt salt,
			real_name realName,
			add_time addTime,
			is_lock isLock,
			add_man addMan
		from think_user
		<where> 
			<if test="id != null">
				and id = #{id}
			</if>
			<if test="account != null and account != ''">
				and account = #{account}
			</if>
		</where>
		ORDER BY add_time DESC
	</select>
	
	<insert id="inster">
		insert into
		think_user(
			id ,
			account ,
			mailbox ,
			password ,
			salt ,
			real_name ,
			add_time ,
			add_man
		)
		values(
			#{id},
			#{account},
			#{mailbox},
			#{password},
			#{salt},
			#{realName},
			#{addTime},
			#{addMan}
		)
	</insert>
	
	<update id="update">
		update think_user
		<set>
			<if test="account != null and account != ''">
				account = #{account},
			</if>
			<if test="mailbox != null and mailbox != '' ">
				mailbox = #{mailbox},
			</if>
			<if test="password != null and password != '' ">
				password = #{password},
			</if>
			<if test="salt != null and salt != ''">
				salt = #{salt},
			</if>
			<if test="realName != null and realName != ''">
				real_name = #{realName},
			</if>
			<if test="addTime != null and addTime != ''">
				add_time = #{addTime},
			</if>
			<if test="isLock != null">
				is_lock = #{isLock},
			</if>
			<if test="addMan != null and addMan != ''">
				add_man = #{addMan},
			</if>
		</set>
		where id = #{id}
	</update>
	<select id="queryUsersAnalyze" resultType="java.util.Map">
		select u.id id,u.account account,u.real_name realName,sum(r.is_correct) answerCorrect
		from think_user u
		left join think_record r
		on u.id=r.user_id
		group by u.id
		order by answerCorrect desc
	</select>

	<select id="queryCompletionDegree" resultType="java.util.Map">
		select count(b.id) blankfills,sum(r.is_correct) answers
	 	from think_blankfill b
	 	left join (
	  		select *
			from think_record r
	  		where  r.user_id = #{id} ) r
		on b.id = r.blankfill_id
	</select>
	<select id="queryStudyIndex" resultType="java.util.Map">
		select c.id id,c.`name` text,count(b.category_id) max,s.count count
		from (think_blankfill b
			left join think_category c
			on b.category_id=c.id)
		left join think_statistics s
		on b.category_id=s.category_id
		where s.user_id = #{id}
		group by c.id
	</select>

</mapper>